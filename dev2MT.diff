diff --git a/Gate.cc b/Gate.cc
index 485fe65..4e43496 100644
--- a/Gate.cc
+++ b/Gate.cc
@@ -51,11 +51,7 @@
 #ifdef G4UI_USE
 #include "G4UIExecutive.hh"
 #endif
-#ifdef G4MULTITHREADED
-#include "GateActionInitialization.hh"
-#include "G4MTRunManager.hh"
-#include "GateAnalysis.hh"
-#endif
+
 //-----------------------------------------------------------------------------
 void printHelpAndQuit( G4String msg )
 {
@@ -142,8 +138,7 @@ void executeCommandQueue( std::queue< G4String > commandQueue, G4UImanager* UIma
 {
   while( commandQueue.size() )
     {
-      //G4cout << commandQueue.front() << G4endl;
-      GateMessage("G4", 0, commandQueue.front() << G4endl);
+      G4cout << commandQueue.front() << G4endl;
       UImanager->ApplyCommand( commandQueue.front() );
       commandQueue.pop();
     }
@@ -165,9 +160,6 @@ void welcome()
 #ifdef GATE_USE_GPU
   GateMessage("Core", 0, "GPU support activated" << G4endl );
 #endif
-#ifdef G4MULTITHREADED
-  GateMessage("Core", 0, "Multi Thread support activated" << G4endl );
-#endif
   GateMessage("Core", 0, G4endl);
 }
 //-----------------------------------------------------------------------------
@@ -276,28 +268,11 @@ int main( int argc, char* argv[] )
 
   // Construct the default run manager
   GateRunManager* runManager = new GateRunManager;
-#ifdef G4MULTITHREADED
-  G4int nThreads = G4Threading::G4GetNumberOfCores();
-  runManager->SetNumberOfThreads(nThreads); // Is equal to 2 by default
-#endif
-  
-  // Create various singleton objets
-#ifdef G4ANALYSIS_USE_GENERAL
-  GateOutputMgr::SetDigiMode( aDigiMode );
-  GateOutputMgr* outputMgr = GateOutputMgr::GetInstance();
-  GateDigitizer* digitizer = GateDigitizer::GetInstance();
-  GatePulseProcessorChain* singleChain = new GatePulseProcessorChain( digitizer, "Singles" );
-  digitizer->StoreNewPulseProcessorChain( singleChain );
-#endif
 
-#ifdef G4MULTITHREADED
-  GateAnalysis* myRecords = new GateAnalysis("analysis", outputMgr, aDigiMode);
-#else
   // Set the Basic ROOT Output
   GateRecorderBase* myRecords = 0;
 #ifdef G4ANALYSIS_USE_ROOT
   myRecords = new GateROOTBasicOutput;
-#endif  
 #endif
 
   // Set the DetectorConstruction
@@ -308,7 +283,7 @@ int main( int argc, char* argv[] )
   runManager->SetUserInitialization( GatePhysicsList::GetInstance() );
 
   // Set the users actions to handle callback for actors - before the initialisation
-  GateUserActions* myActions = new GateUserActions( runManager, myRecords );
+  new GateUserActions( runManager, myRecords );
 
   // Set the Visualization Manager
 #ifdef G4VIS_USE
@@ -322,11 +297,15 @@ int main( int argc, char* argv[] )
   runManager->InitializeAll();
 
   // Incorporate the user actions, set the particles generator
-#ifdef G4MULTITHREADED
-   // User action initialization  
-   runManager->SetUserInitialization( new GateActionInitialization( myActions, myRecords ) );
-#else
-   runManager->SetUserAction( new GatePrimaryGeneratorAction() );
+  runManager->SetUserAction( new GatePrimaryGeneratorAction() );
+
+  // Create various singleton objets
+#ifdef G4ANALYSIS_USE_GENERAL
+  GateOutputMgr::SetDigiMode( aDigiMode );
+  GateOutputMgr* outputMgr = GateOutputMgr::GetInstance();
+  GateDigitizer* digitizer = GateDigitizer::GetInstance();
+  GatePulseProcessorChain* singleChain = new GatePulseProcessorChain( digitizer, "Singles" );
+  digitizer->StoreNewPulseProcessorChain( singleChain );
 #endif
 
   if( aDigiMode == kofflineMode )
diff --git a/README b/README
index a2ea5b1..8f1d006 100644
--- a/README
+++ b/README
@@ -16,7 +16,7 @@
 
 #  ****************************************************************************
 #  *                                                                          *
-#  * OpenGATE Collaboration are pleased to announce the release of GATE 7.1.0 *
+#  * OpenGATE Collaboration are pleased to announce the release of GATE 7.1   *
 #  *                                                                          *
 #  ****************************************************************************
 
@@ -29,7 +29,7 @@
 
 
                           # *------------* #
-                          # * 03/23/2015 * #
+                          # * 03/30/2015 * #
                           # *------------* #
 
 
@@ -42,7 +42,7 @@
 - The installation of this GATE V7.1 version is supported, tested and recommanded with the following:
 
     - Linux distributions: RED HAT & Fedora & Mandrake & Mandriva & Ubuntu...
-    - Compiler: gcc 4.1 to 4.7
+    - Compiler: gcc 4.4 to 4.9
     - ROOT 5.xx (from 14 to last version)
     - Geant4 10.1 (including with embedded CLHEP)
     - Optional dependencies: lmf_v3.0
@@ -68,7 +68,6 @@ NOTES:
     - In the same directory, create two directories to build and install GATE:
       mkdir gate_v7.1-build
       mkdir gate_v7.1-install
-
     - Move into the GATE build directory:
       cd gate_v7.1-build
 
diff --git a/ReleaseNotesV7.1.txt b/ReleaseNotesV7.1.txt
new file mode 100644
index 0000000..9569fff
--- /dev/null
+++ b/ReleaseNotesV7.1.txt
@@ -0,0 +1,89 @@
+
+                     #  *ooooOOOO0000OOOOoooo*  #
+                     #  *                    *  #
+                     #  *    GATE_v7.1       *  #
+                     #  *                    *  #
+                     #  *ooooOOOO0000OOOOoooo*  #
+
+
+                          # *------------* #
+                          # * 03/30/2015 * #
+                          # *------------* #
+
+
+
+-------------------------------
+General set-up and installation:
+-------------------------------
+
+	- This version is validated for Geant4 10.1
+	- The compilation is validated for from gcc4.4 to gcc4.9
+	- It is no more needed to use system CLHEP. Geant4 embedded version now works (flag GATE_USE_SYSTEM_CLHEP=OFF by default). 
+	  Alternatively, users may still use system CLHEP version 2.2.0.4 (put the flag ON).
+	- To download binary data for benchmark and example folders, set GATE_DOWNLOAD_BENCHMARKS_DATA and GATE_DOWNLOAD_EXAMPLES_DATA
+	  variables to ON.
+	- For GPU features the CUDA tools are needed (see doc). 
+
+
+----------------------------------------------------------------------------
+All information regarding the installation are provided by the documentation:
+----------------------------------------------------------------------------
+
+Generic page: 		http://wiki.opengatecollaboration.org/index.php/InstallationGuideV7.1
+Cmake procedure: 	http://wiki.opengatecollaboration.org/index.php/New_Compilation_ProcedureV7.1
+GPU modules:		http://wiki.opengatecollaboration.org/index.php/New_Compilation_ProcedureV7.1#GPU_.26_CUDA_tools
+
+
+-----------------------------
+New developments and features:
+-----------------------------
+
+	- GPU modules for OpticalPET and CT applications. For details, read the user’s guide on the section:
+	  http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1:How_to_use_Gate_on_a_GPU
+	  Note: technical limitations of the GPU modules are indicated in the user’s guide. 
+	  Read also the examples provided within the GATE sources for understanding the interests and limitations.
+	  
+	- Reader of voxellized sources within GATE have been extended. They now can read 3D images in following formats: 
+		* Interfile (8-bit, 16- or 32-bit Signed and Unsigned, and 32- or 64-bit Real)
+		* Analyze
+		* MetaImage (mhd/raw)
+	  For details, read the user’s guide on the section: 
+          http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1:Voxelized_Source_and_Phantom#Voxelized_sources
+
+	- New options with the General Particle Source (GPS) to define and customize an energy spectrum associated to primary events. 
+	  For details, read the user’s guide on the section: http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1:Source#Defining_the_energy
+	   
+	- Physic list builder mechanism is available, following the Geant4 approach. For details, read the following section: 
+	  http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1:Setting_up_the_physics#New_physics_list_mechanism 
+	  
+	- DoseActor now uses double precision for computation (so the required memory is doubled). 
+	  Outputs are still in float. This should solve precision issues in some situations.
+	  
+	- New fast algorithm to compute dose for low energy gamma beams (lower than 1 MeV), the seTLE (split-exponential Track Length
+	  Estimator), about 105-106 faster than plain Monte-Carlo. See example 10 in the source code and
+	  http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1:Readout_parameters_for_Radiotherapy_applications:_Actors#TLE_and_seTLE_.28Track_Length_Estimator.29 
+
+	- Various bug corrections for the PhaseSpaceActor (store all steps default value to off). 
+
+	- Various bug fixes and improvements.
+
+
+---------------------
+Documentation updates:
+---------------------
+
+Generic page: 		    http://www.opengatecollaboration.org/UsersGuide
+Dedicated wiki page: 	    http://wiki.opengatecollaboration.org/index.php/Users_Guide_V7.1
+
+
+--------
+Examples:
+--------
+
+	- GPU modules: Optical configurations are described in the following source directory:
+	  PATH_TO/examples/example_GPU
+	- How to define an customize an energy spectrum:  
+	  PATH_TO/examples/example_UserSpectrum 
+	- Dosimetry example:
+	  PATH_TO/examples/example_Radiotherapy
+
diff --git a/examples/example_Radiotherapy/example1/mac/main.mac b/examples/example_Radiotherapy/example1/mac/main.mac
index 5729b76..c4f3f63 100644
--- a/examples/example_Radiotherapy/example1/mac/main.mac
+++ b/examples/example_Radiotherapy/example1/mac/main.mac
@@ -25,7 +25,7 @@
 # GEOMETRY
 #=====================================================
 
-/gate/geometry/setMaterialDatabase                 ../data/GateMaterials.db
+/gate/geometry/setMaterialDatabase                 data/GateMaterials.db
 
 # WORLD
 /gate/world/setMaterial                      Air
diff --git a/examples/example_Radiotherapy/example10/data/phantom.raw.md5 b/examples/example_Radiotherapy/example10/data/phantom.raw.md5
deleted file mode 100644
index b00fadf..0000000
--- a/examples/example_Radiotherapy/example10/data/phantom.raw.md5
+++ /dev/null
@@ -1 +0,0 @@
-f942d5a94d90ccfaa2bbc5823b790c44
diff --git a/examples/example_Radiotherapy/example10/data/resampledTHORAX.raw.md5 b/examples/example_Radiotherapy/example10/data/resampledTHORAX.raw.md5
new file mode 100644
index 0000000..b00fadf
--- /dev/null
+++ b/examples/example_Radiotherapy/example10/data/resampledTHORAX.raw.md5
@@ -0,0 +1 @@
+f942d5a94d90ccfaa2bbc5823b790c44
diff --git a/source/arf/include/GateARFTable.hh b/source/arf/include/GateARFTable.hh
index efaa2cc..e966196 100644
--- a/source/arf/include/GateARFTable.hh
+++ b/source/arf/include/GateARFTable.hh
@@ -7,6 +7,7 @@ See GATE/LICENSE.txt for further details
 ----------------------*/
 
 #include "GateConfiguration.h"
+#include "GateMessageManager.hh"
 
 #ifdef G4ANALYSIS_USE_ROOT
 
@@ -23,8 +24,6 @@ See GATE/LICENSE.txt for further details
 #include "TTree.h"
 #include "TBranch.h"
 
-#include "GateMessageManager.hh"
-
 class TH2I;
 class TH2D;
 class TH1D;
@@ -82,11 +81,7 @@ G4String GetName() { return m_name;};
 void GetARFAsBinaryBuffer(G4double*&);
 void FillTableFromBuffer(G4double*&);
 void SetNSimuPhotons(G4double N)
-{
-  m_TotSimuPhotons = N;
-  //G4cout<<" TOTAL number of photons   " <<(long unsigned int)(m_TotSimuPhotons)<<Gateendl; 
-  GateMessage("Core", 0, " TOTAL number of photons   " <<(long unsigned int)(m_TotSimuPhotons)<<Gateendl);
-};
+{m_TotSimuPhotons = N;G4cout<<" TOTAL number of photons   " <<(long unsigned int)(m_TotSimuPhotons)<<Gateendl; };
 G4int GetPrimary() { return m_isprimary;};
 void SetPrimary() { m_isprimary = 1;}
 void SetNoPrimary() { m_isprimary = 0;}
diff --git a/source/arf/src/GateARFDataToRoot.cc b/source/arf/src/GateARFDataToRoot.cc
index 69e4d39..6dc939c 100644
--- a/source/arf/src/GateARFDataToRoot.cc
+++ b/source/arf/src/GateARFDataToRoot.cc
@@ -30,10 +30,8 @@ See GATE/LICENSE.txt for further details
 #include "G4ios.hh"
 #include <iomanip>
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "GatePrimaryGeneratorAction.hh"
 #include "GateHitConvertor.hh"
-#include "GateMessageManager.hh"
 
 #include "G4ParticleDefinition.hh"
 #include "G4Positron.hh"
@@ -95,8 +93,8 @@ OUT_camera = 0;
 GateARFDataToRoot::~GateARFDataToRoot() 
 {
   delete m_rootMessenger;
-  //if (nVerboseLevel > 0) G4cout << "GateARFDataToRoot deleting..." << Gateendl;
-  GateMessage("GateARFDataToRoot", nVerboseLevel, "GateARFDataToRoot deleting..." << Gateendl);
+  if (nVerboseLevel > 0) G4cout << "GateARFDataToRoot deleting..." << Gateendl;
+
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo...
diff --git a/source/arf/src/GateARFTableMgr.cc b/source/arf/src/GateARFTableMgr.cc
index 8a355b8..a23125d 100644
--- a/source/arf/src/GateARFTableMgr.cc
+++ b/source/arf/src/GateARFTableMgr.cc
@@ -7,6 +7,7 @@ See GATE/LICENSE.txt for further details
 ----------------------*/
 
 #include "GateConfiguration.h"
+#include "GateMessageManager.hh"
 
 #ifdef G4ANALYSIS_USE_ROOT
 
@@ -25,7 +26,6 @@ See GATE/LICENSE.txt for further details
 #include "G4ThreeVector.hh"
 #include "G4RotationMatrix.hh"
 #include "GateARFSD.hh"
-#include "GateMessageManager.hh"
 
 
 GateARFTableMgr::GateARFTableMgr( G4String aName, GateARFSD* theARFSD )
diff --git a/source/digits_hits/include/GateActionInitialization.hh b/source/digits_hits/include/GateActionInitialization.hh
deleted file mode 100644
index f9cc16e..0000000
--- a/source/digits_hits/include/GateActionInitialization.hh
+++ /dev/null
@@ -1,33 +0,0 @@
-/*----------------------
-  Copyright (C): OpenGATE Collaboration
-
-  This software is distributed under the terms
-  of the GNU Lesser General  Public Licence (LGPL)
-  See GATE/LICENSE.txt for further details
-  ----------------------*/ 
-
-#ifndef GateActionInitialization_H
-#define GateActionInitialization_H
-
-#include "G4VUserActionInitialization.hh"
-#include "GateUserActions.hh"
-#include "GateRecorderBase.hh"
-
-class GateUserActions;
-class GateRecorderBase;
-
-class GateActionInitialization: public G4VUserActionInitialization
-{
-  public:
-    GateActionInitialization(GateUserActions * cbm, GateRecorderBase * r);
-    virtual ~GateActionInitialization();
-
-    virtual void BuildForMaster() const;
-    virtual void Build() const;
-
-private:
-    GateUserActions* pCallbackMan;
-    GateRecorderBase* recorder;
-};
-
-#endif
\ No newline at end of file
diff --git a/source/digits_hits/include/GateToBinary.hh b/source/digits_hits/include/GateToBinary.hh
index cf51f49..3626147 100644
--- a/source/digits_hits/include/GateToBinary.hh
+++ b/source/digits_hits/include/GateToBinary.hh
@@ -28,7 +28,7 @@
 #include "GateCoincidenceDigi.hh"
 #include "GateSingleDigi.hh"
 #include "GatePrimaryGeneratorAction.hh"
-#include "G4RunManager.hh"
+#include "GateRunManager.hh"
 
 class GateToBinaryMessenger;
 
diff --git a/source/digits_hits/include/GateUserActions.hh b/source/digits_hits/include/GateUserActions.hh
index 79df93d..c2aa4bc 100644
--- a/source/digits_hits/include/GateUserActions.hh
+++ b/source/digits_hits/include/GateUserActions.hh
@@ -27,7 +27,6 @@ See GATE/LICENSE.txt for further details
 #include <iomanip>
 #include <vector>
 
-//#include "G4RunManager.hh"
 #include "GateRunManager.hh"
 
 #include "GateMessageManager.hh"
diff --git a/source/digits_hits/src/GateActionInitialization.cc b/source/digits_hits/src/GateActionInitialization.cc
deleted file mode 100644
index 1daf343..0000000
--- a/source/digits_hits/src/GateActionInitialization.cc
+++ /dev/null
@@ -1,52 +0,0 @@
-/*----------------------
-  Copyright (C): OpenGATE Collaboration
-
-  This software is distributed under the terms
-  of the GNU Lesser General  Public Licence (LGPL)
-  See GATE/LICENSE.txt for further details
-  ----------------------*/
-
-#include "GateActionInitialization.hh"
-#include "GatePrimaryGeneratorAction.hh"
-#include "GateActions.hh"
-#include "GateUserActions.hh"
-#include "GateRecorderBase.hh"
-#include "G4RunManager.hh"
-#ifdef G4MULTITHREADED
-#include "G4MTRunManager.hh"
-#endif
-
-GateActionInitialization::GateActionInitialization(GateUserActions * cbm, GateRecorderBase * r):
-G4VUserActionInitialization(), pCallbackMan(cbm), recorder(r)
-{}
-
-GateActionInitialization::~GateActionInitialization()
-{}
-
-void GateActionInitialization::BuildForMaster() const
-{
-	// In MT mode, to be clearer, the RunAction class for the master thread might be
-	// different than the one used for the workers.
-	// This RunAction will be called before and after starting the
-	// workers.
-  //SetUserAction( new GateRunAction(pCallbackMan, recorder) ); 
-}
-
-void GateActionInitialization::Build() const
-{   
- 
-  // Initialize the primary particles
-  GatePrimaryGeneratorAction* prim = new GatePrimaryGeneratorAction();  
-  SetUserAction( prim ); 
-
-  GateRunAction* run = new GateRunAction(pCallbackMan, recorder);
-  SetUserAction( run );
-
-  GateEventAction* event = new GateEventAction(pCallbackMan, recorder);
-  SetUserAction( event );
-  
-  SetUserAction( new GateTrackingAction(pCallbackMan, recorder));
-  SetUserAction( new GateSteppingAction(pCallbackMan, recorder));
-//SetUserAction( new GateStackingAction(pCallbackMan, recorder));
-	
-} 
\ No newline at end of file
diff --git a/source/digits_hits/src/GateActions.cc b/source/digits_hits/src/GateActions.cc
index 601e125..9d42e4b 100644
--- a/source/digits_hits/src/GateActions.cc
+++ b/source/digits_hits/src/GateActions.cc
@@ -124,8 +124,8 @@ GateEventAction::GateEventAction(GateUserActions * cbm, GateRecorderBase* r)
 inline void GateEventAction::BeginOfEventAction(const G4Event* anEvent)
 {
   GateMessage("Core", 2, "Begin Of Event " << anEvent->GetEventID() << "\n");
-  TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
 
+  TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
   if ( theMode != kTracker )
     {
       if (GetFlagBasicOutput()){
@@ -165,6 +165,7 @@ inline void GateEventAction::EndOfEventAction(const G4Event* anEvent)
 #endif
 
   /* PY Descourt 08/09/2009 */
+
   GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
   TrackingMode theMode = myAction->GetMode();
 
@@ -221,7 +222,9 @@ void GateTrackingAction::PreUserTrackingAction(const G4Track* a)
   }
 
   /* PY Descourt 08/09/2009 */
+
   GateSteppingAction*  myAction = (GateSteppingAction *) (GateRunManager::GetRunManager()->GetUserSteppingAction()) ;
+
   TrackingMode theMode = myAction->GetMode();
 
   if ( theMode == kDetector )
@@ -307,6 +310,7 @@ void GateTrackingAction::PostUserTrackingAction(const G4Track* aTrack)
         delete dummy_step_vector[i];
       dummy_step_vector.clear();
     }
+
   GateSteppingAction*  myAction = (GateSteppingAction *) (GateRunManager::GetRunManager()->GetUserSteppingAction()) ;
   TrackingMode theMode = myAction->GetMode();
   if ( theMode == kDetector )
@@ -773,7 +777,6 @@ void GateSteppingAction::UserSteppingAction(const G4Step* theStep)
     {
       G4int EventID = G4EventManager::GetEventManager()->GetNonconstCurrentEvent()->GetEventID();
       G4int RunID   = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();
-
       G4Track * fTrack = theStep->GetTrack();
       G4int ParentID  =  fTrack->GetParentID();
       G4int TrackID = fTrack->GetTrackID();
diff --git a/source/digits_hits/src/GateAnalysis.cc b/source/digits_hits/src/GateAnalysis.cc
index 76b68da..a908b13 100644
--- a/source/digits_hits/src/GateAnalysis.cc
+++ b/source/digits_hits/src/GateAnalysis.cc
@@ -17,7 +17,6 @@
 #include "GateRecorderBase.hh"
 #include "G4ios.hh"
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "G4ParticleDefinition.hh"
 #include "G4Positron.hh"
 #include "G4GenericIon.hh"
@@ -35,7 +34,6 @@
 #include "GateVVolume.hh"
 #include "GateActions.hh"
 #include "GateToRoot.hh"
-
 //--------------------------------------------------------------------------------------------------
 GateAnalysis::GateAnalysis(const G4String& name, GateOutputMgr* outputMgr,DigiMode digiMode)
   : GateVOutputModule(name,outputMgr,digiMode)
@@ -126,9 +124,7 @@ void GateAnalysis::RecordEndOfEvent(const G4Event* event)
     m_trajectoryNavigator->SetTrajectoryContainer(trajectoryContainer);
 
   G4int eventID = event->GetEventID();
-
   G4int runID   = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();
-
   //G4cout << "GateAnalysis::EventID et RunID :  " <<eventID<<" - "<<runID<< Gateendl;
 
   //G4int i;
@@ -323,6 +319,7 @@ void GateAnalysis::RecordEndOfEvent(const G4Event* event)
 
           TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
 
+
           if (  theMode == kTracker ) // in tracker mode we store the infos about the number of compton and rayleigh
             { // G4cout << " GateAnalysis eventID "<<eventID<<Gateendl;
               GateToRoot* gateToRoot = (GateToRoot*) (GateOutputMgr::GetInstance()->GetModule("root"));
diff --git a/source/digits_hits/src/GateDetectionProfileActor.cc b/source/digits_hits/src/GateDetectionProfileActor.cc
index 49bb626..67f0cf1 100644
--- a/source/digits_hits/src/GateDetectionProfileActor.cc
+++ b/source/digits_hits/src/GateDetectionProfileActor.cc
@@ -7,6 +7,7 @@
   ----------------------*/
 
 #include "GateDetectionProfileActor.hh"
+#include "GateMessageManager.hh"
 
 #ifdef G4ANALYSIS_USE_ROOT
 
diff --git a/source/digits_hits/src/GateDistributionExponential.cc b/source/digits_hits/src/GateDistributionExponential.cc
index 7220864..ffeacad 100644
--- a/source/digits_hits/src/GateDistributionExponential.cc
+++ b/source/digits_hits/src/GateDistributionExponential.cc
@@ -15,7 +15,6 @@ See GATE/LICENSE.txt for further details
 #include <CLHEP/Random/RandExponential.h>
 #include "Randomize.hh"
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 
 GateDistributionExponential::GateDistributionExponential(const G4String& itsName)
diff --git a/source/digits_hits/src/GateDistributionFile.cc b/source/digits_hits/src/GateDistributionFile.cc
index 359a5a6..aa0500c 100644
--- a/source/digits_hits/src/GateDistributionFile.cc
+++ b/source/digits_hits/src/GateDistributionFile.cc
@@ -13,7 +13,6 @@ See GATE/LICENSE.txt for further details
 #include <math.h>
 #include <CLHEP/Random/RandFlat.h>
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 
 GateDistributionFile::GateDistributionFile(const G4String& itsName)
diff --git a/source/digits_hits/src/GateDistributionFlat.cc b/source/digits_hits/src/GateDistributionFlat.cc
index e3706b2..e4f6a32 100644
--- a/source/digits_hits/src/GateDistributionFlat.cc
+++ b/source/digits_hits/src/GateDistributionFlat.cc
@@ -14,7 +14,6 @@ See GATE/LICENSE.txt for further details
 //#include <CLHEP/Random/RandFlat.h>
 #include "Randomize.hh"
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 
 GateDistributionFlat::GateDistributionFlat(const G4String& itsName)
diff --git a/source/digits_hits/src/GateDistributionGauss.cc b/source/digits_hits/src/GateDistributionGauss.cc
index 96809d1..c9854f6 100644
--- a/source/digits_hits/src/GateDistributionGauss.cc
+++ b/source/digits_hits/src/GateDistributionGauss.cc
@@ -15,7 +15,6 @@ See GATE/LICENSE.txt for further details
 #include "Randomize.hh"
 #include "GateTools.hh"
 #include "GateConstants.hh"
-#include "GateMessageManager.hh"
 
 
 GateDistributionGauss::GateDistributionGauss(const G4String& itsName)
diff --git a/source/digits_hits/src/GateDistributionListMessenger.cc b/source/digits_hits/src/GateDistributionListMessenger.cc
index 7a8b392..c08b1de 100644
--- a/source/digits_hits/src/GateDistributionListMessenger.cc
+++ b/source/digits_hits/src/GateDistributionListMessenger.cc
@@ -14,7 +14,6 @@ See GATE/LICENSE.txt for further details
 #include "GateDistributionFlat.hh"
 #include "GateDistributionFile.hh"
 #include "GateDistributionManual.hh"
-#include "GateMessageManager.hh"
 
 #include "G4UIdirectory.hh"
 #include "G4UIcmdWithAString.hh"
@@ -29,6 +28,7 @@ See GATE/LICENSE.txt for further details
 #include "G4UImanager.hh"
 
 #include "GateListManager.hh"
+#include "GateMessageManager.hh"
 
 std::map<G4String,GateDistributionListMessenger::distType_t> GateDistributionListMessenger::fgkTypes;
 // constructor
diff --git a/source/digits_hits/src/GateDistributionManual.cc b/source/digits_hits/src/GateDistributionManual.cc
index cbc1345..868a7db 100644
--- a/source/digits_hits/src/GateDistributionManual.cc
+++ b/source/digits_hits/src/GateDistributionManual.cc
@@ -13,7 +13,6 @@ See GATE/LICENSE.txt for further details
 #include <math.h>
 #include <CLHEP/Random/RandFlat.h>
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 
 GateDistributionManual::GateDistributionManual(const G4String& itsName)
diff --git a/source/digits_hits/src/GateFastAnalysis.cc b/source/digits_hits/src/GateFastAnalysis.cc
index 71f627b..0c7dfe1 100644
--- a/source/digits_hits/src/GateFastAnalysis.cc
+++ b/source/digits_hits/src/GateFastAnalysis.cc
@@ -20,7 +20,6 @@ See GATE/LICENSE.txt for further details
 #include "G4Step.hh"
 #include "G4Event.hh"
 #include "G4HCofThisEvent.hh"
-#include "G4RunManager.hh"
 #include "GateCrystalHit.hh"
 #include "GateSourceMgr.hh"
 #include "GateOutputMgr.hh"
@@ -86,7 +85,6 @@ void GateFastAnalysis::RecordEndOfEvent(const G4Event* event)
 
     G4int sourceID = (((GateSourceMgr::GetInstance())->GetSourcesForThisEvent())[0])->GetSourceID();
     G4int eventID  = event->GetEventID();
-
     G4int runID    = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();
 
         for (G4int iHit=0;iHit<NbHits;iHit++)
diff --git a/source/digits_hits/src/GateFluenceActor.cc b/source/digits_hits/src/GateFluenceActor.cc
index 3fc76eb..6238c46 100644
--- a/source/digits_hits/src/GateFluenceActor.cc
+++ b/source/digits_hits/src/GateFluenceActor.cc
@@ -124,9 +124,7 @@ void GateFluenceActor::Construct()
 /// Save data
 void GateFluenceActor::SaveData()
 {
-
   G4int rID = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();
-
   char filename[1024];
   // Printing all particles
   GateVImageActor::SaveData();
diff --git a/source/digits_hits/src/GateInverseSquareBlurringLaw.cc b/source/digits_hits/src/GateInverseSquareBlurringLaw.cc
index 5410574..0832b28 100644
--- a/source/digits_hits/src/GateInverseSquareBlurringLaw.cc
+++ b/source/digits_hits/src/GateInverseSquareBlurringLaw.cc
@@ -8,7 +8,6 @@ See GATE/LICENSE.txt for further details
 
 
 #include "GateInverseSquareBlurringLaw.hh"
-#include "GateMessageManager.hh"
 
 /*! \class  GateInverseSquareBlurringLaw
   \brief  InverseSquare law giving the resolution in energy
diff --git a/source/digits_hits/src/GateLinearBlurringLaw.cc b/source/digits_hits/src/GateLinearBlurringLaw.cc
index efaeffc..322bbb8 100644
--- a/source/digits_hits/src/GateLinearBlurringLaw.cc
+++ b/source/digits_hits/src/GateLinearBlurringLaw.cc
@@ -9,7 +9,6 @@ See GATE/LICENSE.txt for further details
 #include "G4SystemOfUnits.hh"
 
 #include "GateLinearBlurringLaw.hh"
-#include "GateMessageManager.hh"
 
 /*! \class  GateLinearBlurringLaw
   \brief  Linear law giving the resolution in energy
diff --git a/source/digits_hits/src/GateOutputMgr.cc b/source/digits_hits/src/GateOutputMgr.cc
index 6292ef7..03e9c70 100644
--- a/source/digits_hits/src/GateOutputMgr.cc
+++ b/source/digits_hits/src/GateOutputMgr.cc
@@ -19,7 +19,6 @@
 #include "G4UImanager.hh"
 #include "G4UserSteppingAction.hh"
 #include "G4SteppingManager.hh"
-#include "G4RunManager.hh"
 #include "G4Track.hh"
 #include "G4Step.hh"
 #include "G4VVisManager.hh"
diff --git a/source/digits_hits/src/GatePhaseSpaceActor.cc b/source/digits_hits/src/GatePhaseSpaceActor.cc
index 1a01084..2bf34e2 100644
--- a/source/digits_hits/src/GatePhaseSpaceActor.cc
+++ b/source/digits_hits/src/GatePhaseSpaceActor.cc
@@ -378,12 +378,10 @@ void GatePhaseSpaceActor::UserSteppingAction(const GateVVolume *, const G4Step *
                    << " stepPoint time proper=" << G4BestUnit(stepPoint->GetProperTime(), "Time")
                    << " global=" << G4BestUnit(stepPoint->GetGlobalTime(), "Time")
                    << " local=" << G4BestUnit(stepPoint->GetLocalTime(), "Time") << Gateendl);
-
   GateDebugMessage("Actor", 4, "trackid="
                    << step->GetTrack()->GetParentID()
                    << " event=" << GateRunManager::GetRunManager()->GetCurrentEvent()->GetEventID()
                    << " run=" << GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID() << Gateendl);
-
   GateDebugMessage("Actor", 4, "pos = " << x << " " << y  << " " << z << Gateendl);
   GateDebugMessage("Actor", 4, "E = " << G4BestUnit(stepPoint->GetKineticEnergy(), "Energy") << Gateendl);
 
diff --git a/source/digits_hits/src/GateSinoAccelToEcat7.cc b/source/digits_hits/src/GateSinoAccelToEcat7.cc
index 4c6f846..f632aa7 100644
--- a/source/digits_hits/src/GateSinoAccelToEcat7.cc
+++ b/source/digits_hits/src/GateSinoAccelToEcat7.cc
@@ -14,7 +14,6 @@ See GATE/LICENSE.txt for further details
 #include "GateSinoAccelToEcat7Messenger.hh"
 
 #include "globals.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateOutputMgr.hh"
diff --git a/source/digits_hits/src/GateSinoToEcat7.cc b/source/digits_hits/src/GateSinoToEcat7.cc
index 8e78eb3..2b1d1bd 100644
--- a/source/digits_hits/src/GateSinoToEcat7.cc
+++ b/source/digits_hits/src/GateSinoToEcat7.cc
@@ -23,7 +23,6 @@ See GATE/LICENSE.txt for further details
 #include "GateSinoToEcat7Messenger.hh"
 
 #include "globals.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateOutputMgr.hh"
diff --git a/source/digits_hits/src/GateSinogram.cc b/source/digits_hits/src/GateSinogram.cc
index 3870ab7..9a1e9db 100644
--- a/source/digits_hits/src/GateSinogram.cc
+++ b/source/digits_hits/src/GateSinogram.cc
@@ -23,6 +23,7 @@ See GATE/LICENSE.txt for further details
 #include "Randomize.hh"
 #include "GateConstants.hh"
 #include "GateMessageManager.hh"
+
 // Reset the matrix and prepare a new acquisition
 void GateSinogram::Reset(size_t ringNumber, size_t crystalNumber, size_t radialElemNb, size_t virtualRingNumber, size_t virtualCrystalPerBlockNumber)
 {
diff --git a/source/digits_hits/src/GateToASCII.cc b/source/digits_hits/src/GateToASCII.cc
index b509060..5984e4d 100644
--- a/source/digits_hits/src/GateToASCII.cc
+++ b/source/digits_hits/src/GateToASCII.cc
@@ -33,7 +33,6 @@
 #include "G4VProcess.hh"
 #include "G4ios.hh"
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "G4ParticleDefinition.hh"
 #include "G4Positron.hh"
 #include "G4GenericIon.hh"
@@ -147,10 +146,8 @@ void GateToASCII::RecordEndOfRun(const G4Run * )
   if (nVerboseLevel > 2)
     G4cout << "GateToASCII::RecordEndOfRun" << Gateendl;
   if (m_outFileRunsFlag) {
-
     G4int nEvent = ((GatePrimaryGeneratorAction*)GateRunManager::GetRunManager()->
 		    GetUserPrimaryGeneratorAction())->GetEventNumber();
-
     if (nVerboseLevel > 0) G4cout
       << "GateToASCII::RecordEndOfRun: Events in the past run: " << nEvent << Gateendl;
     m_outFileRun
diff --git a/source/digits_hits/src/GateToBinary.cc b/source/digits_hits/src/GateToBinary.cc
index 34cbbfd..54fc075 100644
--- a/source/digits_hits/src/GateToBinary.cc
+++ b/source/digits_hits/src/GateToBinary.cc
@@ -20,7 +20,6 @@
 #include "GateOutputMgr.hh"
 #include "GateVGeometryVoxelStore.hh"
 #include "G4DigiManager.hh"
-#include "GateRunManager.hh"
 
 // 0x79000000 equivalent to 2,030,043,136 bytes
 #define LIMIT_SIZE 0x79000000
@@ -137,7 +136,6 @@ void GateToBinary::RecordEndOfRun( G4Run const* )
 
 	if( m_outFileRunsFlag )
 	{
-
 		G4int nEvent =
 			( ( (GatePrimaryGeneratorAction*)GateRunManager::GetRunManager()->
 			GetUserPrimaryGeneratorAction())->GetEventNumber() );
diff --git a/source/digits_hits/src/GateToGPUImageSPECT.cc b/source/digits_hits/src/GateToGPUImageSPECT.cc
index 8ed3fc5..6a73d00 100644
--- a/source/digits_hits/src/GateToGPUImageSPECT.cc
+++ b/source/digits_hits/src/GateToGPUImageSPECT.cc
@@ -8,7 +8,6 @@
 #include <cmath>
 #include "pthread.h"
 #include <vector>
-#include "G4RunManager.hh"
 #include "GateConfiguration.h"
 #include "G4VProcess.hh"
 #include "G4UnitsTable.hh"
diff --git a/source/digits_hits/src/GateToImageCT.cc b/source/digits_hits/src/GateToImageCT.cc
index e1fd5fc..9b7e8a1 100644
--- a/source/digits_hits/src/GateToImageCT.cc
+++ b/source/digits_hits/src/GateToImageCT.cc
@@ -15,7 +15,7 @@
 
 #include "G4VProcess.hh"
 #include "G4UnitsTable.hh"
-#include "G4RunManager.hh"
+#include "GateRunManager.hh"
 #include "G4EmCalculator.hh"
 #include "G4TouchableHistory.hh"
 #include "G4TransportationManager.hh"
@@ -26,7 +26,6 @@
 #include "GateToImageCTMessenger.hh"
 #include "GateArrayComponent.hh"
 #include "GateVSystem.hh"
-#include "GateRunManager.hh"
 
 GateToImageCT::GateToImageCT( const G4String& name, GateOutputMgr* outputMgr,
                               GateVSystem* itsSystem, DigiMode digiMode )
@@ -387,9 +386,7 @@ void GateToImageCT::RecordBeginOfEvent( const G4Event* aEvent )
   if( fabs( newPosition.getX() ) > m_detectorInX / 2
       || fabs( newPosition.getY() )  > m_detectorInY / 2 )
     {
-
       GateRunManager::GetRunManager()->AbortEvent();
-
       if ( nVerboseLevel > 1 )
         G4cout << " Abort event: Out of detector section "<< Gateendl;
     }
diff --git a/source/digits_hits/src/GateToInterfile.cc b/source/digits_hits/src/GateToInterfile.cc
index fc9b3fc..fe7d53e 100644
--- a/source/digits_hits/src/GateToInterfile.cc
+++ b/source/digits_hits/src/GateToInterfile.cc
@@ -67,7 +67,6 @@
 #include "GateToInterfileMessenger.hh"
 
 #include "globals.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateOutputMgr.hh"
diff --git a/source/digits_hits/src/GateToOpticalRaw.cc b/source/digits_hits/src/GateToOpticalRaw.cc
index bef938d..afc4c9b 100644
--- a/source/digits_hits/src/GateToOpticalRaw.cc
+++ b/source/digits_hits/src/GateToOpticalRaw.cc
@@ -14,7 +14,6 @@
 #include "GateToOpticalRaw.hh"
 #include "GateToOpticalRawMessenger.hh"
 #include "globals.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateOutputMgr.hh"
diff --git a/source/digits_hits/src/GateToProjectionSet.cc b/source/digits_hits/src/GateToProjectionSet.cc
index fd00fc0..acc8925 100644
--- a/source/digits_hits/src/GateToProjectionSet.cc
+++ b/source/digits_hits/src/GateToProjectionSet.cc
@@ -79,7 +79,6 @@
 
 #include "globals.hh"
 #include "G4UnitsTable.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateSingleDigi.hh"
diff --git a/source/digits_hits/src/GateToRoot.cc b/source/digits_hits/src/GateToRoot.cc
index e1850cf..19521ec 100644
--- a/source/digits_hits/src/GateToRoot.cc
+++ b/source/digits_hits/src/GateToRoot.cc
@@ -35,7 +35,6 @@
 #include "G4VProcess.hh"
 #include "G4ios.hh"
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "G4ParticleDefinition.hh"
 #include "G4Positron.hh"
 #include "G4GenericIon.hh"
@@ -282,8 +281,7 @@ void GateToRoot::RecordBeginOfAcquisition()
   if (nVerboseLevel > 2)
     G4cout << "GateToRoot::RecordBeginOfAcquisition" << Gateendl;
 
-  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );  
-  
+  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
   TrackingMode theMode = myAction->GetMode();
   if (nVerboseLevel > 1) G4cout << " GateToRoot::RecordBeginOfAcquisition()  Tracking Mode " << theMode << Gateendl;
 
@@ -515,7 +513,6 @@ void GateToRoot::RecordEndOfAcquisition()
   /* PY Descourt 08/09/2009 */
 
   GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
-
   TrackingMode theMode = myAction->GetMode();
   if ( theMode == kTracker )
     {
@@ -651,8 +648,8 @@ void GateToRoot::RecordBeginOfEvent(const G4Event* evt )
   strcpy( theCRData.theRayleighVolumeName1, G4String("NULL").c_str()  );
   strcpy( theCRData.theRayleighVolumeName2, G4String("NULL").c_str()  );
 
-  TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();  
 
+  TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
   if ( (theMode == kDetector) &&   (evt->GetNumberOfPrimaryVertex() > 0) )
     {
 
@@ -693,8 +690,8 @@ void GateToRoot::RecordEndOfEvent(const G4Event* event)
 
   // GateMessage("Output", 5 , " GateToRoot::RecordEndOfEvent -- begin" << Gateendl;);
 
-  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
 
+  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
   TrackingMode theMode = myAction->GetMode();
   if ( theMode == kTracker )return;
 
@@ -787,10 +784,8 @@ void GateToRoot::RecordEndOfEvent(const G4Event* event)
       } else {
 	//! better than the simple eventID, but still not enough: it's valid only for
 	//! the single run and not for the application
-
 	G4int iEvent = ((GatePrimaryGeneratorAction*)GateRunManager::GetRunManager()->
 			GetUserPrimaryGeneratorAction())->GetEventNumber();
-
 	if (m_rootNtupleFlag) ntuple->Fill(iEvent,
 					   eventTime/s,
 					   m_positronKinEnergy/MeV,
@@ -1293,10 +1288,12 @@ void GateToRoot::OpenTracksFile()
   G4int lastEventID = -1;
   G4String previousFN = fTracksFN ;
 
+
   GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
 
   G4int currentN = myAction->GetcurrentN();
 
+
   G4int NbOfFiles = myAction->GetNfiles();
 
   //if ( m_verboseLevel > 3 )
@@ -1475,10 +1472,7 @@ void GateToRoot::GetCurrentRecStepData( const G4Event* evt )
   //PrintRecStep();
 
   if ( m_RSEventID != evt->GetEventID() )
-    {
-
-      const G4Run* currentRun =  GateRunManager::GetRunManager()->GetCurrentRun() ;      
-
+    {const G4Run* currentRun =  GateRunManager::GetRunManager()->GetCurrentRun() ;
       G4int RunID = currentRun->GetRunID();
       G4cout << " GateToRoot::GetCurrentRecStepData :::: current Run ID "<< RunID <<"    current RecStep File " <<m_RecStepTree->GetCurrentFile()->GetName()<<Gateendl;
       G4cout << " GateToRoot::GetCurrentRecStepData :::: m_currentTracksData = "<<m_currentTracksData  <<"     tracksTuple->GetEntries()   "<< tracksTuple->GetEntries() <<Gateendl;
@@ -1493,9 +1487,7 @@ void GateToRoot::GetCurrentRecStepData( const G4Event* evt )
 
 GateTrack* GateToRoot::GetCurrentTracksData()
 {
-
-  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );  
-
+  GateSteppingAction* myAction = ( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) );
   if ( m_currentTracksData ==  tracksTuple->GetEntries() ) // check if we are done
     {
       m_EOF = 1;
@@ -1559,9 +1551,7 @@ void GateToRoot::RecordRecStepData( const G4Event* evt )
 {
   //G4cout << " GateToRoot::RecordRecStepData : recording RecStep Data to ROOT file " << Gateendl;
   m_RSEventID = evt->GetEventID();
-
-  m_RSRunID   = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();  
-
+  m_RSRunID   = GateRunManager::GetRunManager()->GetCurrentRun()->GetRunID();
   m_RecStepTree->Fill();
   //PrintRecStep();
   //G4cout << " GateToRoot::RecordRecStepData : runID " << m_RSRunID << "  eventID "<< m_RSEventID  << Gateendl;
diff --git a/source/digits_hits/src/GateToSinoAccel.cc b/source/digits_hits/src/GateToSinoAccel.cc
index 5bbba1e..06d0638 100644
--- a/source/digits_hits/src/GateToSinoAccel.cc
+++ b/source/digits_hits/src/GateToSinoAccel.cc
@@ -11,7 +11,6 @@ See GATE/LICENSE.txt for further details
 
 #include "globals.hh"
 #include "G4UnitsTable.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateCoincidenceDigi.hh"
diff --git a/source/digits_hits/src/GateToSinogram.cc b/source/digits_hits/src/GateToSinogram.cc
index 35ec801..22e42ea 100644
--- a/source/digits_hits/src/GateToSinogram.cc
+++ b/source/digits_hits/src/GateToSinogram.cc
@@ -20,7 +20,6 @@ See GATE/LICENSE.txt for further details
 
 #include "globals.hh"
 #include "G4UnitsTable.hh"
-#include "G4RunManager.hh"
 #include "G4Run.hh"
 
 #include "GateCoincidenceDigi.hh"
@@ -30,7 +29,6 @@ See GATE/LICENSE.txt for further details
 #include "GateTools.hh"
 #include "GateVSystem.hh"
 #include "GateApplicationMgr.hh"
-#include "GateMessageManager.hh"
 
 // #include "GatePlacementMove.hh"
 
diff --git a/source/digits_hits/src/GateTrajectoryNavigator.cc b/source/digits_hits/src/GateTrajectoryNavigator.cc
index 39d27e1..c05d797 100644
--- a/source/digits_hits/src/GateTrajectoryNavigator.cc
+++ b/source/digits_hits/src/GateTrajectoryNavigator.cc
@@ -119,7 +119,7 @@ G4int GateTrajectoryNavigator::FindPositronTrackID()
 std::vector<G4int> GateTrajectoryNavigator::FindAnnihilationGammasTrackID()
 {
 
-TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();  
+TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
 
   if (nVerboseLevel > 2)
     G4cout << "GateTrajectoryNavigator::FindAnnihilationGammasTrackID" << Gateendl;
diff --git a/source/digits_hits/src/GateUserActions.cc b/source/digits_hits/src/GateUserActions.cc
index a71814c..7abba4e 100644
--- a/source/digits_hits/src/GateUserActions.cc
+++ b/source/digits_hits/src/GateUserActions.cc
@@ -12,9 +12,7 @@ See GATE/LICENSE.txt for further details
 
 #include "GateUserActions.hh"
 #include "GateActions.hh"
-#ifdef G4MULTITHREADED
-#include "GateActionInitialization.hh"
-#endif
+
 #include "G4UImanager.hh"
 #include "G4VVisManager.hh"
 //#include "G4Run.hh"
@@ -53,10 +51,6 @@ GateUserActions::GateUserActions(GateRunManager* m, GateRecorderBase* r)
 
 
   // Set fGate' user action classes to the GateRunmanager :
-#ifdef G4MULTITHREADED
-  GateActionInitialization* ActionInitialization = new GateActionInitialization(this, recorder);
-  pRunManager->SetUserInitialization(ActionInitialization);
-#else
   // Run/Event/Tracking/Stepping in order to get the callbacks
   GateRunAction* RunAction = new GateRunAction(this, recorder);
   GateEventAction* EventAction = new GateEventAction(this, recorder);
@@ -66,8 +60,7 @@ GateUserActions::GateUserActions(GateRunManager* m, GateRecorderBase* r)
   pRunManager->SetUserAction(RunAction);
   pRunManager->SetUserAction(EventAction);
   pRunManager->SetUserAction(TrackingAction);
-  pRunManager->SetUserAction(SteppingAction);  
-#endif
+  pRunManager->SetUserAction(SteppingAction);
 
   //pRunManager->SetUserAction(dynamic_cast<G4UserRunAction *>(this)); //Don't know why this don't work
   //pRunManager->SetUserAction(dynamic_cast<G4UserEventAction *>(this));
diff --git a/source/digits_hits/src/GateVDistributionArray.cc b/source/digits_hits/src/GateVDistributionArray.cc
index a20f5b2..e0918c5 100644
--- a/source/digits_hits/src/GateVDistributionArray.cc
+++ b/source/digits_hits/src/GateVDistributionArray.cc
@@ -12,7 +12,6 @@ See GATE/LICENSE.txt for further details
 #include <math.h>
 #include <CLHEP/Random/RandFlat.h>
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 
 GateVDistributionArray::GateVDistributionArray(const G4String& itsName)
diff --git a/source/digits_hits/src/GateVOutputModule.cc b/source/digits_hits/src/GateVOutputModule.cc
index 2f4ead5..d1ebc93 100644
--- a/source/digits_hits/src/GateVOutputModule.cc
+++ b/source/digits_hits/src/GateVOutputModule.cc
@@ -10,7 +10,6 @@ See GATE/LICENSE.txt for further details
 #include "GateVOutputModule.hh"
 //#include "GateOutputModuleMessenger.hh"
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 GateVOutputModule::GateVOutputModule(const G4String& name, GateOutputMgr* outputMgr,DigiMode digiMode)
   : m_outputMgr(outputMgr),
diff --git a/source/general/include/GateRunManager.hh b/source/general/include/GateRunManager.hh
index 3269e2e..c4164d9 100644
--- a/source/general/include/GateRunManager.hh
+++ b/source/general/include/GateRunManager.hh
@@ -28,23 +28,12 @@
 #define GateRunManager_h 1
 
 #include "G4RunManager.hh"
-#ifdef G4MULTITHREADED
- #include "G4MTRunManager.hh"
-#endif
 #include "GateHounsfieldToMaterialsBuilder.hh"
 
 class GateRunManagerMessenger;
 class GateDetectorConstruction;
 
-static G4String DefaultRegion="DefaultRegionForTheWorld";
-
-#ifdef G4MULTITHREADED
-//static G4String DefaultRegion="DefaultRegionForParallelWorld";
-class GateRunManager : public G4MTRunManager
-#else
-//static G4String DefaultRegion="DefaultRegionForTheWorld";
 class GateRunManager : public G4RunManager
-#endif
 {
 public:
   //! Constructor
@@ -71,11 +60,8 @@ public:
 
   //! Return the instance of the run manager
   static GateRunManager* GetRunManager()
-  #ifdef G4MULTITHREADED
-  {	return dynamic_cast<GateRunManager*>(G4MTRunManager::GetRunManager()); }
-  #else
   {	return dynamic_cast<GateRunManager*>(G4RunManager::GetRunManager()); }
-  #endif
+
   bool GetGlobalOutputFlag() { return mGlobalOutputFlag; }
   void EnableGlobalOutput(bool b) { mGlobalOutputFlag = b; }
   void SetUserPhysicList(G4VUserPhysicsList * m) { mUserPhysicList = m; }
diff --git a/source/general/src/GateApplicationMgr.cc b/source/general/src/GateApplicationMgr.cc
index 8fef4a8..c651ad6 100644
--- a/source/general/src/GateApplicationMgr.cc
+++ b/source/general/src/GateApplicationMgr.cc
@@ -709,9 +709,7 @@ void GateApplicationMgr::EnableTimeStudyForSteps(G4String filename)
 
 void GateApplicationMgr::PrintStatus()
 {
-
     const G4Run * run = GateRunManager::GetRunManager()->GetCurrentRun();
-
     const int runID = run->GetRunID() + 1;
     const int runTotal = listOfTimeSlice.size();
 
diff --git a/source/general/src/GateClockDependent.cc b/source/general/src/GateClockDependent.cc
index 95394d3..d9f6258 100644
--- a/source/general/src/GateClockDependent.cc
+++ b/source/general/src/GateClockDependent.cc
@@ -11,7 +11,6 @@ See GATE/LICENSE.txt for further details
 
 #include "GateClock.hh"
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 //-------------------------------------------------------------------------------------------------------
 // Constructor.
diff --git a/source/general/src/GateMiscFunctions.cc b/source/general/src/GateMiscFunctions.cc
index ddb7a90..5432064 100644
--- a/source/general/src/GateMiscFunctions.cc
+++ b/source/general/src/GateMiscFunctions.cc
@@ -11,7 +11,6 @@ See GATE/LICENSE.txt for further details
 
 #include "GateMiscFunctions.hh"
 #include "GateActorManager.hh"
-#include "GateRunManager.hh"
 
 #include "G4SystemOfUnits.hh"
 #include "G4UIcmdWithADouble.hh"
@@ -22,7 +21,7 @@ See GATE/LICENSE.txt for further details
 #include "G4AffineTransform.hh"
 #include "G4VSolid.hh"
 #include "G4ThreeVector.hh"
-#include "G4RunManager.hh"
+#include "GateRunManager.hh"
 #include "G4Run.hh"
 
 #include <sys/types.h> 
@@ -658,9 +657,7 @@ int GetIndexFromTime(std::vector<double> & mTimeList, double aTime) {
 G4String GetSaveCurrentFilename(G4String & mSaveFilename) {
   int nr=0;
   int ne=0;
-
-  const G4Run * run = GateRunManager::GetRunManager()->GetCurrentRun();  
-
+  const G4Run * run = GateRunManager::GetRunManager()->GetCurrentRun();
   if (run) nr = run->GetRunID(); 
   else {
     nr = 0;
diff --git a/source/general/src/GateModuleListManager.cc b/source/general/src/GateModuleListManager.cc
index dbfbe20..39954b6 100644
--- a/source/general/src/GateModuleListManager.cc
+++ b/source/general/src/GateModuleListManager.cc
@@ -9,7 +9,6 @@ See GATE/LICENSE.txt for further details
 
 #include "GateModuleListManager.hh"
 #include "GateTools.hh"
-#include "GateMessageManager.hh"
 
 //--------------------------------------------------------------------------------------------
 GateModuleListManager::GateModuleListManager(GateNamedObject* itsMotherObject,
diff --git a/source/general/src/GatePrimaryGeneratorAction.cc b/source/general/src/GatePrimaryGeneratorAction.cc
index 674cf22..31762c7 100644
--- a/source/general/src/GatePrimaryGeneratorAction.cc
+++ b/source/general/src/GatePrimaryGeneratorAction.cc
@@ -7,14 +7,10 @@ See GATE/LICENSE.txt for further details
 ----------------------*/
 
 
-#include "G4RunManager.hh"
 #include "G4Event.hh"
 #include "G4GeneralParticleSource.hh"
 #include "G4ParticleGun.hh"
 #include "G4UImanager.hh"
-#ifdef G4MULTITHREADED
-#include "G4MTRunManager.hh"
-#endif
 
 #include "Randomize.hh"
 #include "G4ios.hh"
@@ -101,7 +97,6 @@ void GatePrimaryGeneratorAction::GenerateSimulationPrimaries(G4Event* event)
   G4int eventID = event->GetEventID();
   GateSourceMgr* sourceMgr = GateSourceMgr::GetInstance();
   if (eventID==0) {
-
     const G4Run* currentRun = GateRunManager::GetRunManager()->GetCurrentRun();
     //if( currentRun->GetRunID()==0) sourceMgr->Initialization();
     sourceMgr->PrepareNextRun( currentRun );
@@ -111,11 +106,8 @@ void GatePrimaryGeneratorAction::GenerateSimulationPrimaries(G4Event* event)
   G4int numVertices = sourceMgr->PrepareNextEvent(event);  
   //! stop the run if no particle has been generated by the source manager
   if (numVertices == 0) {
-#ifdef G4MULTITHREADED
-    G4MTRunManager* runManager = GateRunManager::GetMasterRunManager();
-#else
-    G4RunManager* runManager = GateRunManager::GetRunManager();
-#endif
+    GateRunManager* runManager = GateRunManager::GetRunManager();
+
     runManager->AbortRun(true);
     if (m_nVerboseLevel>1) G4cout << "GatePrimaryGeneratorAction::GeneratePrimaries: numVertices == 0, run aborted " << Gateendl;  
   } 
@@ -147,7 +139,7 @@ G4int numEvent = digiSource->PrepareNextEvent(event);
 
 //! stop the run if no particle has been generated by the source manager
 if (numEvent == 0) {
-G4RunManager* runManager = G4RunManager::GetRunManager();
+GateRunManager* runManager = GateRunManager::GetRunManager();
 
 runManager->AbortRun(true);
 if (m_nVerboseLevel>1) G4cout << "GatePrimaryGeneratorAction::GeneratePrimaries: numVertices == 0, run aborted " << Gateendl;  
diff --git a/source/general/src/GateRunManager.cc b/source/general/src/GateRunManager.cc
index 14fdd99..60ef31e 100644
--- a/source/general/src/GateRunManager.cc
+++ b/source/general/src/GateRunManager.cc
@@ -8,9 +8,6 @@
 
 
 #include "GateRunManager.hh"
-#ifdef G4MULTITHREADED
- #include "G4MTRunManager.hh"
-#endif
 #include "GateDetectorConstruction.hh"
 #include "GateRunManagerMessenger.hh"
 #include "GateHounsfieldToMaterialsBuilder.hh"
@@ -30,11 +27,7 @@
 #endif
 
 //----------------------------------------------------------------------------------------
-#ifdef G4MULTITHREADED
-GateRunManager::GateRunManager():G4MTRunManager()
-#else
 GateRunManager::GateRunManager():G4RunManager()
-#endif
 {
   pMessenger = new GateRunManagerMessenger(this);
   mHounsfieldToMaterialsBuilder = new GateHounsfieldToMaterialsBuilder();
@@ -68,9 +61,10 @@ void GateRunManager::InitializeAll()
   // Check that we're in PreInit or Idle state
   if (currentState!=G4State_PreInit && currentState!=G4State_Idle)
     {
+      GateError("Illegal application state - "
+	     << "GateRunManager::Initialize() failed." << Gateendl);
       /*G4cerr << "Illegal application state - "
-	     << "G4RunManager::Initialize() ignored." << Gateendl;*/ 
-	  GateError("Illegal application state - " << "GateRunManager::InitializeAll() failed.");
+	     << "G4RunManager::Initialize() ignored." << Gateendl;*/
       return;
     }
 
@@ -108,7 +102,7 @@ void GateRunManager::InitializeAll()
     // the Gate one is used to store/retrieve cuts parameters.
 
     // Consider the e- cut as default (in mm)
-    double def = GatePhysicsList::GetInstance()->mapOfRegionCuts[DefaultRegion].electronCut;
+    double def = GatePhysicsList::GetInstance()->mapOfRegionCuts["DefaultRegionForTheWorld"].electronCut;
     mUserPhysicList->SetDefaultCutValue(def*mm);
     mUserPhysicList->SetCutsWithDefault();
 
@@ -120,7 +114,7 @@ void GateRunManager::InitializeAll()
                                                                     G4ProductionCutsTable::GetProductionCutsTable()->GetHighEdgeEnergy());
 
     // Initialization
-    GateRunManager::SetUserInitialization(mUserPhysicList);//use inheritance!!
+    GateRunManager::SetUserInitialization(mUserPhysicList);//use inheritance
 
     //To take into account the user cuts (steplimiter and special cuts)
 #if (G4VERSION_MAJOR > 9)
@@ -134,8 +128,7 @@ void GateRunManager::InitializeAll()
   } // End if (mUserPhysicListName != "")
 
   // InitializePhysics
-  InitPhysics();
-
+  GateRunManager::InitializePhysics();//use inheritance
 
   // Take into account the em option set by the user (dedx bin etc)
   GatePhysicsList::GetInstance()->SetEmProcessOptions();
@@ -166,7 +159,7 @@ void GateRunManager::InitGeometryOnly()
     //G4bool unique;
     G4String regionName = (*pi)->GetName();
 
-    if(regionName!=DefaultRegion){
+    if(regionName!="DefaultRegionForTheWorld"){
       RegionStore->DeRegister((*pi));
       GateMessage("Cuts", 5, "Region "<<regionName<<" deleted."<< Gateendl);
     }
@@ -177,8 +170,8 @@ void GateRunManager::InitGeometryOnly()
   // Initialise the geometry in the main() programm
   if (!geometryInitialized)
     {
-      GateMessage("Core", 1, "Initialization of geometry" << Gateendl); 
-      G4RunManager::InitializeGeometry(); // G4MTRunManager class doesn't override this method
+      GateMessage("Core", 1, "Initialization of geometry" << Gateendl);
+      GateRunManager::InitializeGeometry();//use inheritance
     }
   else
     {
@@ -186,16 +179,9 @@ void GateRunManager::InitGeometryOnly()
       det = detConstruction->GateDetectorConstruction::GetGateDetectorConstruction();
       det->GateDetectorConstruction::SetGeometryStatusFlag(GateDetectorConstruction::geometry_needs_rebuild);
       det->GateDetectorConstruction::UpdateGeometry();
-#ifdef G4MULTITHREADED
-      
-      det->GateDetectorConstruction::ConstructSDandField();
-      det->GateDetectorConstruction::ConstructParallelSD();
-      nParallelWorlds = det->GateDetectorConstruction::ConstructParallelGeometries();
-      
-      GateRunManager::GetMasterRunManagerKernel()->SetNumberOfParallelWorld(nParallelWorlds);
-      GateRunManager::GetMasterRunManagerKernel()->DefineWorldVolume(det->GateDetectorConstruction::GetWorldVolume(),false);
-      geometryInitialized=true;
-#endif
+      //	  nParallelWorlds = userDetector->ConstructParallelGeometries();
+      //          kernel->SetNumberOfParallelWorld(nParallelWorlds);
+      //	  geometryInitialized=true;
     }
 
 }
@@ -205,7 +191,7 @@ void GateRunManager::InitGeometryOnly()
 //----------------------------------------------------------------------------------------
 void GateRunManager::InitPhysics()
 {
-  GateRunManager::InitializePhysics();
+  GateRunManager::InitializePhysics(); //use inheritance
 }
 //----------------------------------------------------------------------------------------
 
@@ -220,8 +206,8 @@ void GateRunManager::RunInitialization()
   }
 
   // GateMessage("Core", 0, "Initialization of the run " << Gateendl);
-  // Perform a regular initialisation from parent class
-  G4RunManager::RunInitialization(); // G4MTRunManager class doesn't override this method
+  // Perform a regular initialisation
+  G4RunManager::RunInitialization();
 
   // Initialization of the atom deexcitation processes
   // must be done after all other initialization
diff --git a/source/general/src/GateUIcontrolMessenger.cc b/source/general/src/GateUIcontrolMessenger.cc
index 9eecea2..d1f7cca 100644
--- a/source/general/src/GateUIcontrolMessenger.cc
+++ b/source/general/src/GateUIcontrolMessenger.cc
@@ -8,7 +8,6 @@ See GATE/LICENSE.txt for further details
 
 
 #include "GateUIcontrolMessenger.hh"
-#include "GateMessageManager.hh"
 
 #include "G4UIdirectory.hh"
 #include "G4UIcmdWithoutParameter.hh"
diff --git a/source/geometry/include/GateTrap.hh b/source/geometry/include/GateTrap.hh
index aa49067..08e45a7 100644
--- a/source/geometry/include/GateTrap.hh
+++ b/source/geometry/include/GateTrap.hh
@@ -14,7 +14,6 @@ See GATE/LICENSE.txt for further details
 #include "GateVolumeManager.hh"
 
 #include "G4Trap.hh"
-#include "G4RunManager.hh"
 #include "G4VVisManager.hh"
 
 #include "globals.hh"
diff --git a/source/geometry/include/GateTrpd.hh b/source/geometry/include/GateTrpd.hh
index 1747012..b893cf4 100644
--- a/source/geometry/include/GateTrpd.hh
+++ b/source/geometry/include/GateTrpd.hh
@@ -14,7 +14,6 @@
 #include "GateVVolume.hh"
 #include "GateVolumeManager.hh"
 
-#include "G4RunManager.hh"
 #include "G4VVisManager.hh"
 #include "G4Trd.hh"
 #include "G4Box.hh"
diff --git a/source/geometry/include/GateWedge.hh b/source/geometry/include/GateWedge.hh
index 7e953a6..701b68b 100644
--- a/source/geometry/include/GateWedge.hh
+++ b/source/geometry/include/GateWedge.hh
@@ -12,7 +12,6 @@
 #include "globals.hh"
 
 #include "GateVVolume.hh"
-#include "G4RunManager.hh"
 #include "G4VVisManager.hh"
 #include "G4Trap.hh"
 #include "GateVolumeManager.hh"
diff --git a/source/geometry/src/GateCompressedVoxelOutput.cc b/source/geometry/src/GateCompressedVoxelOutput.cc
index 4d57c00..f4a6d73 100644
--- a/source/geometry/src/GateCompressedVoxelOutput.cc
+++ b/source/geometry/src/GateCompressedVoxelOutput.cc
@@ -28,7 +28,6 @@ See GATE/LICENSE.txt for further details
 #include "GateRecorderBase.hh"
 #include "G4ios.hh"
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "GatePrimaryGeneratorAction.hh"
 
 #include "G4ParticleDefinition.hh"
diff --git a/source/geometry/src/GateVoxelOutput.cc b/source/geometry/src/GateVoxelOutput.cc
index 7566b31..6258d1b 100644
--- a/source/geometry/src/GateVoxelOutput.cc
+++ b/source/geometry/src/GateVoxelOutput.cc
@@ -18,7 +18,6 @@ See GATE/LICENSE.txt for further details
 #include "G4VProcess.hh"
 #include "G4ios.hh"
 #include "G4UImanager.hh"
-#include "G4RunManager.hh"
 #include "G4ParticleDefinition.hh"
 #include "G4Positron.hh"
 #include "G4GenericIon.hh"
diff --git a/source/physics/src/GateFakePhysicsList.cc b/source/physics/src/GateFakePhysicsList.cc
index 5fef4f1..03bf73d 100644
--- a/source/physics/src/GateFakePhysicsList.cc
+++ b/source/physics/src/GateFakePhysicsList.cc
@@ -16,10 +16,10 @@ See GATE/LICENSE.txt for further details
  */
 
 #include "GateFakePhysicsList.hh"
-#include "GateMessageManager.hh"
 
 #include "G4ProcessManager.hh"
 #include "G4ParticleTypes.hh"
+#include "GateMessageManager.hh"
 
 
 void GateFakePhysicsList::ConstructParticle()
diff --git a/source/physics/src/GatePhysicsList.cc b/source/physics/src/GatePhysicsList.cc
index 229859d..ea3ee4c 100644
--- a/source/physics/src/GatePhysicsList.cc
+++ b/source/physics/src/GatePhysicsList.cc
@@ -67,7 +67,7 @@ GatePhysicsList::GatePhysicsList(): G4VUserPhysicsList()
   worldCuts.electronCut = -1;
   worldCuts.positronCut = -1;
   worldCuts.protonCut = -1;
-  mapOfRegionCuts[DefaultRegion] = worldCuts;
+  mapOfRegionCuts["DefaultRegionForTheWorld"] = worldCuts;
   mLoadState=0;
   mDEDXBinning=-1;
   mLambdaBinning=-1;
@@ -757,7 +757,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
 
   //-----------------------------------------------------------------------------
   // Set defaults production cut for the world
-  ParticleCutType worldCuts =  mapOfRegionCuts[DefaultRegion];
+  ParticleCutType worldCuts =  mapOfRegionCuts["DefaultRegionForTheWorld"];
 
   if(worldCuts.gammaCut == -1) worldCuts.gammaCut = defaultCutValue;
   if(worldCuts.electronCut == -1) worldCuts.electronCut = defaultCutValue;
@@ -770,10 +770,10 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
               << worldCuts.positronCut << " "
               << worldCuts.protonCut   << " mm" << Gateendl);
 
-  phys->SetCutValue(worldCuts.gammaCut, "gamma",DefaultRegion);
-  phys->SetCutValue(worldCuts.electronCut, "e-",DefaultRegion);
-  phys->SetCutValue(worldCuts.positronCut, "e+",DefaultRegion);
-  phys->SetCutValue(worldCuts.protonCut, "proton",DefaultRegion);
+  phys->SetCutValue(worldCuts.gammaCut, "gamma","DefaultRegionForTheWorld");
+  phys->SetCutValue(worldCuts.electronCut, "e-","DefaultRegionForTheWorld");
+  phys->SetCutValue(worldCuts.positronCut, "e+","DefaultRegionForTheWorld");
+  phys->SetCutValue(worldCuts.protonCut, "proton","DefaultRegionForTheWorld");
 
   //-----------------------------------------------------------------------------
   // Set default production cut to other regions
@@ -783,7 +783,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
   while (pi != pe) {
     G4String regionName = (*pi)->GetName();
 
-    if (regionName != DefaultRegion && regionName !="world") {
+    if (regionName != "DefaultRegionForTheWorld" && regionName !="world") {
       RegionCutMapType::iterator current = mapOfRegionCuts.find(regionName);
       if (current == mapOfRegionCuts.end()) {
 	// GateMessage("Cuts",5, " Cut not set for region " << regionName << " put -1" << Gateendl);
@@ -802,7 +802,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
   while (it != mapOfRegionCuts.end()) {
     // do not apply cut for the world region
     // GateMessage("Cuts", 5, "Region (*it).first : " << (*it).first<< Gateendl);
-    if (((*it).first != DefaultRegion) && ((*it).first != "world")) {
+    if (((*it).first != "DefaultRegionForTheWorld") && ((*it).first != "world")) {
       G4Region* region = RegionStore->GetRegion((*it).first);
       if (!region) {
 	GateError( "The region '" << (*it).first << "' does not exist !");
@@ -816,7 +816,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         {
           G4bool unique;
           parentRegion =  parentRegion->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             ParticleCutType parentRegionCuts = mapOfRegionCuts[parentRegion->GetName()];
             regionCuts.gammaCut = parentRegionCuts.gammaCut;
           }
@@ -829,7 +829,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         {
           G4bool unique;
           parentRegion =  parentRegion->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             ParticleCutType parentRegionCuts = mapOfRegionCuts[parentRegion->GetName()];
             regionCuts.electronCut = parentRegionCuts.electronCut;
           }
@@ -842,7 +842,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         {
           G4bool unique;
           parentRegion =  parentRegion->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             ParticleCutType parentRegionCuts = mapOfRegionCuts[parentRegion->GetName()];
             regionCuts.positronCut = parentRegionCuts.positronCut;
           }
@@ -854,7 +854,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         {
           G4bool unique;
           parentRegion =  parentRegion->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             ParticleCutType parentRegionCuts = mapOfRegionCuts[parentRegion->GetName()];
             regionCuts.protonCut = parentRegionCuts.protonCut;
           }
@@ -901,18 +901,18 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
   //G4LogicalVolumeStore * logicalVolumeStore = G4LogicalVolumeStore::GetInstance();
 
   GateUserLimits *  worldUserLimit = new GateUserLimits();
-  if(mapOfVolumeUserLimits[DefaultRegion] != 0)
+  if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"] != 0)
     {
-      if(mapOfVolumeUserLimits[DefaultRegion]->GetMaxStepSize()       != -1.)
-        worldUserLimit->SetMaxStepSize(mapOfVolumeUserLimits[DefaultRegion]->GetMaxStepSize());
-      if(mapOfVolumeUserLimits[DefaultRegion]->GetMaxTrackLength()    != -1.)
-        worldUserLimit->SetMaxTrackLength(mapOfVolumeUserLimits[DefaultRegion]->GetMaxTrackLength());
-      if(mapOfVolumeUserLimits[DefaultRegion]->GetMaxToF()            != -1.)
-        worldUserLimit->SetMaxToF(mapOfVolumeUserLimits[DefaultRegion]->GetMaxToF());
-      if(mapOfVolumeUserLimits[DefaultRegion]->GetMinKineticEnergy()  != -1.)
-        worldUserLimit->SetMinKineticEnergy(mapOfVolumeUserLimits[DefaultRegion]->GetMinKineticEnergy());
-      if(mapOfVolumeUserLimits[DefaultRegion]->GetMinRemainingRange() != -1.)
-        worldUserLimit->SetMinRemainingRange(mapOfVolumeUserLimits[DefaultRegion]->GetMinRemainingRange());
+      if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxStepSize()       != -1.)
+        worldUserLimit->SetMaxStepSize(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxStepSize());
+      if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxTrackLength()    != -1.)
+        worldUserLimit->SetMaxTrackLength(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxTrackLength());
+      if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxToF()            != -1.)
+        worldUserLimit->SetMaxToF(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMaxToF());
+      if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMinKineticEnergy()  != -1.)
+        worldUserLimit->SetMinKineticEnergy(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMinKineticEnergy());
+      if(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMinRemainingRange() != -1.)
+        worldUserLimit->SetMinRemainingRange(mapOfVolumeUserLimits["DefaultRegionForTheWorld"]->GetMinRemainingRange());
     }
 
 
@@ -962,7 +962,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
   while (pi != pe) {
     G4String regionName = (*pi)->GetName();
 
-    if (regionName != DefaultRegion && regionName !="world") {
+    if (regionName != "DefaultRegionForTheWorld" && regionName !="world") {
       VolumeUserLimitsMapType::iterator current = mapOfVolumeUserLimits.find(regionName);
       if (current == mapOfVolumeUserLimits.end()) {
 	GateMessage("Cuts",5, " UserCuts not set for region " << regionName << " put -1" << Gateendl);
@@ -976,7 +976,7 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
   while (it2 != mapOfVolumeUserLimits.end()) {
     // do not apply cut for the world region
     // GateMessage("Cuts", 5, "Region (*it2).first : " << (*it2).first<< Gateendl);
-    if (((*it2).first != DefaultRegion) && ((*it2).first != "world")) {
+    if (((*it2).first != "DefaultRegionForTheWorld") && ((*it2).first != "world")) {
       G4Region* region = RegionStore->GetRegion((*it2).first);
       if (!region) {
 	GateError( "The region '" << (*it2).first << "' does not exist !");
@@ -986,11 +986,11 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
       G4Region* parentRegion =  region;
       G4Region* regionTmp =  region;
       while((regionUserLimit->GetMaxStepSize() == -1) &&
-            (regionTmp->GetName() != DefaultRegion))
+            (regionTmp->GetName() != "DefaultRegionForTheWorld"))
         {
           G4bool unique;
           parentRegion =  regionTmp->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             GateUserLimits * parentRegionUserLimits = mapOfVolumeUserLimits[parentRegion->GetName()];
             regionUserLimit->SetMaxStepSize(  parentRegionUserLimits->GetMaxStepSize()) ;
             GateMessage("Cuts", 5, "Region " << (*it2).first << " maxStepSize " << parentRegionUserLimits->GetMaxStepSize() << Gateendl);
@@ -1000,11 +1000,11 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         }
 
       regionTmp =  region;
-      while(regionUserLimit->GetMaxTrackLength() == -1 && regionTmp->GetName() != DefaultRegion)
+      while(regionUserLimit->GetMaxTrackLength() == -1 && regionTmp->GetName() != "DefaultRegionForTheWorld")
         {
           G4bool unique;
           parentRegion =  regionTmp->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             GateUserLimits * parentRegionUserLimits = mapOfVolumeUserLimits[parentRegion->GetName()];
             regionUserLimit->SetMaxTrackLength(  parentRegionUserLimits->GetMaxTrackLength()) ;
             GateMessage("Cuts", 5, "Region " << (*it2).first << " maxTrackLength " << parentRegionUserLimits->GetMaxTrackLength() << Gateendl);
@@ -1015,11 +1015,11 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
 
 
       regionTmp =  region;
-      while(regionUserLimit->GetMaxToF() == -1 && regionTmp->GetName() != DefaultRegion)
+      while(regionUserLimit->GetMaxToF() == -1 && regionTmp->GetName() != "DefaultRegionForTheWorld")
         {
           G4bool unique;
           parentRegion =  regionTmp->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             GateUserLimits * parentRegionUserLimits = mapOfVolumeUserLimits[parentRegion->GetName()];
             regionUserLimit->SetMaxToF(  parentRegionUserLimits->GetMaxToF()) ;
           }
@@ -1028,11 +1028,11 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         }
 
       regionTmp =  region;
-      while(regionUserLimit->GetMinKineticEnergy() == -1 && regionTmp->GetName() != DefaultRegion)
+      while(regionUserLimit->GetMinKineticEnergy() == -1 && regionTmp->GetName() != "DefaultRegionForTheWorld")
         {
           G4bool unique;
           parentRegion =  regionTmp->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             GateUserLimits * parentRegionUserLimits = mapOfVolumeUserLimits[parentRegion->GetName()];
             regionUserLimit->SetMinKineticEnergy(  parentRegionUserLimits->GetMinKineticEnergy()) ;
           }
@@ -1041,11 +1041,11 @@ void GatePhysicsList::DefineCuts(G4VUserPhysicsList * phys)
         }
 
       regionTmp =  region;
-      while(regionUserLimit->GetMinRemainingRange() == -1 && regionTmp->GetName() != DefaultRegion)
+      while(regionUserLimit->GetMinRemainingRange() == -1 && regionTmp->GetName() != "DefaultRegionForTheWorld")
         {
           G4bool unique;
           parentRegion =  regionTmp->GetParentRegion(unique);
-          if(parentRegion->GetName() != DefaultRegion){
+          if(parentRegion->GetName() != "DefaultRegionForTheWorld"){
             GateUserLimits * parentRegionUserLimits = mapOfVolumeUserLimits[parentRegion->GetName()];
             regionUserLimit->SetMinRemainingRange(  parentRegionUserLimits->GetMinRemainingRange()) ;
           }
@@ -1129,7 +1129,7 @@ void GatePhysicsList::SetCutInRegion(G4String particleName, G4String regionName,
     << "' : " << cutValue << Gateendl);
   */
 
-  if(regionName=="world") regionName=DefaultRegion;
+  if(regionName=="world") regionName="DefaultRegionForTheWorld";
 
   RegionCutMapType::iterator it = mapOfRegionCuts.find(regionName);
   if (it == mapOfRegionCuts.end()) {
@@ -1159,7 +1159,7 @@ void GatePhysicsList::SetCutInRegion(G4String particleName, G4String regionName,
 //-----------------------------------------------------------------------------
 void GatePhysicsList::SetSpecialCutInRegion(G4String cutType, G4String regionName, G4double cutValue)
 {
-  if(regionName=="world") regionName=DefaultRegion;
+  if(regionName=="world") regionName="DefaultRegionForTheWorld";
 
   VolumeUserLimitsMapType::iterator it = mapOfVolumeUserLimits.find(regionName);
   if (it == mapOfVolumeUserLimits.end()) {
diff --git a/source/physics/src/GateRTVPhantom.cc b/source/physics/src/GateRTVPhantom.cc
index 0da3a64..ad9277a 100644
--- a/source/physics/src/GateRTVPhantom.cc
+++ b/source/physics/src/GateRTVPhantom.cc
@@ -7,7 +7,6 @@
 #include <fstream>
 
 #include "G4GeometryManager.hh"
-#include "G4RunManager.hh"
 #include "GateRTVPhantomMessenger.hh"
 #include "GateVGeometryVoxelReader.hh"
 #include "GateVSourceVoxelReader.hh"
@@ -187,7 +186,7 @@ G4GeometryManager::GetInstance()->CloseGeometry( false, true, m_inserter->GetPhy
 G4cout << " #################### REBUILT Geometry of " << m_inserter->GetPhysicalVolume(0)->GetName()<<Gateendl;
 */
 
-//G4RunManager::GetRunManager()->GeometryHasBeenModified();
+//GateRunManager::GetRunManager()->GeometryHasBeenModified();
 
 }
 
diff --git a/source/physics/src/GateRTVPhantomMessenger.cc b/source/physics/src/GateRTVPhantomMessenger.cc
index b4400da..eaa059c 100644
--- a/source/physics/src/GateRTVPhantomMessenger.cc
+++ b/source/physics/src/GateRTVPhantomMessenger.cc
@@ -9,12 +9,12 @@
 
 #include "GateRTVPhantomMessenger.hh"
 #include "GateRTVPhantom.hh"
+#include "GateMessageManager.hh"
 
 #include "G4UIcmdWithAString.hh"
 #include "G4UIcmdWithAnInteger.hh"
 #include "G4UIcmdWithADoubleAndUnit.hh"
 #include "G4UIcmdWithoutParameter.hh"
-#include "GateMessageManager.hh"
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
 GateRTVPhantomMessenger::GateRTVPhantomMessenger(GateRTVPhantom* RTVPhantom)
diff --git a/source/physics/src/GateSPSEneDistribution.cc b/source/physics/src/GateSPSEneDistribution.cc
index ef9bd03..01d1863 100644
--- a/source/physics/src/GateSPSEneDistribution.cc
+++ b/source/physics/src/GateSPSEneDistribution.cc
@@ -10,10 +10,9 @@ See GATE/LICENSE.txt for further details
 #include "Randomize.hh"
 
 #include "GateSPSEneDistribution.hh"
+#include "GateMessageManager.hh"
 #include <fstream>
 #include "G4SystemOfUnits.hh"
-#include "GateMessageManager.hh"
-
 using namespace std;
 
 GateSPSEneDistribution::GateSPSEneDistribution():
diff --git a/source/physics/src/GateSPSPosDistribution.cc b/source/physics/src/GateSPSPosDistribution.cc
index 7024ec2..5a0d64e 100644
--- a/source/physics/src/GateSPSPosDistribution.cc
+++ b/source/physics/src/GateSPSPosDistribution.cc
@@ -13,6 +13,7 @@
 #include "G4TransportationManager.hh"
 #include "G4VPhysicalVolume.hh"
 #include "G4PhysicalVolumeStore.hh"
+
 #include "GateSPSPosDistribution.hh"
 #include "GateMessageManager.hh"
 
diff --git a/source/physics/src/GateSourceMgr.cc b/source/physics/src/GateSourceMgr.cc
index 562599c..288bab4 100644
--- a/source/physics/src/GateSourceMgr.cc
+++ b/source/physics/src/GateSourceMgr.cc
@@ -28,8 +28,6 @@
 #include <vector>
 #include <cmath>
 #include "GateActions.hh"
-#include "G4RunManager.hh"
-
 
 //----------------------------------------------------------------------------------------
 GateSourceMgr* GateSourceMgr::mInstance = 0;
@@ -528,7 +526,6 @@ G4int GateSourceMgr::PrepareNextEvent( G4Event* event )
   //                    << " at time " << m_time/s << " sec." << Gateendl);
 
   GateSteppingAction* myAction = (GateSteppingAction *) ( GateRunManager::GetRunManager()->GetUserSteppingAction() );
-
   TrackingMode theMode =myAction->GetMode();
   m_currentSources.clear();
 
diff --git a/source/physics/src/GateVSource.cc b/source/physics/src/GateVSource.cc
index 862b35b..194b0c4 100644
--- a/source/physics/src/GateVSource.cc
+++ b/source/physics/src/GateVSource.cc
@@ -445,7 +445,7 @@ G4int GateVSource::GeneratePrimaries( G4Event* event )
   
   G4int numVertices = 0;
 
-  GateSteppingAction* myAction = (GateSteppingAction *) ( GateRunManager::GetRunManager()->GetUserSteppingAction() );  
+  GateSteppingAction* myAction = (GateSteppingAction *) ( GateRunManager::GetRunManager()->GetUserSteppingAction() );
 
   TrackingMode theMode =myAction->GetMode();
 
@@ -534,9 +534,7 @@ G4int GateVSource::GeneratePrimaries( G4Event* event )
           numVertices = 0;
           return numVertices;
         }
-
-      G4Run* currentRun = const_cast<G4Run*> ( GateRunManager::GetRunManager()->GetCurrentRun() );  
-
+      G4Run* currentRun = const_cast<G4Run*> ( GateRunManager::GetRunManager()->GetCurrentRun() );
       currentRun->SetRunID( m_currentTrack->GetRunID() );
       event->SetEventID( m_currentTrack->GetEventID() );
       G4int event_id =  m_currentTrack->GetEventID();
@@ -667,9 +665,7 @@ void GateVSource::GeneratePrimaryVertex( G4Event* aEvent )
   }
 
   /* PY Descourt 08/09/2009 */  
-
   TrackingMode theMode =( (GateSteppingAction *)(GateRunManager::GetRunManager()->GetUserSteppingAction() ) )->GetMode();
-
   if (  theMode == kBoth || theMode == kTracker ) 
     {
       G4ThreeVector particle_position;
diff --git a/superbuild/CMakeLists.txt b/superbuild/CMakeLists.txt
index d8bb031..b7cfeba 100644
--- a/superbuild/CMakeLists.txt
+++ b/superbuild/CMakeLists.txt
@@ -104,7 +104,7 @@ IF (BUILD_GATE)
     STAMP_DIR ${base}/stamp
     DOWNLOAD_DIR ${base}/dl
     INSTALL_DIR ${INSTALL_PREFIX}
-    URL ftp://root.cern.ch/root/root_v5.34.05.source.tar.gz
+    URL ftp://root.cern.ch/root/root_v5.34.28.source.tar.gz
     CONFIGURE_COMMAND ${SRC_PREFIX}/root/configure --prefix=${INSTALL_PREFIX}
     )
 ENDIF()
@@ -143,7 +143,7 @@ IF (BUILD_GATE)
     STAMP_DIR ${base}/stamp
     DOWNLOAD_DIR ${base}/dl
     INSTALL_DIR ${INSTALL_PREFIX}
-    URL http://geant4.web.cern.ch/geant4/support/source/geant4.9.6.p03.tar.gz
+    URL http://geant4.web.cern.ch/geant4/support/source/geant4.10.01.tar.gz
     CMAKE_ARGS
     -DCMAKE_PREFIX_PATH:PATH=${INSTALL_PREFIX}
     -DGEANT4_INSTALL_DATA:BOOL=ON
@@ -169,12 +169,15 @@ IF (NOT BUILD_GATE_WITH_RTK)
     DOWNLOAD_DIR ${base}/dl
     INSTALL_DIR ${INSTALL_PREFIX}
     DEPENDS geant4 root
-    GIT_REPOSITORY gitopengate:opengate.git
+    #GIT_REPOSITORY gitopengate:opengate.git
+    GIT_REPOSITORY http://git.opengatecollaboration.org/git/opengate-public.git
     GIT_TAG origin/${GATE_BRANCH}
     CMAKE_ARGS
     -DCMAKE_PREFIX_PATH:PATH=${INSTALL_PREFIX}
     -DGATE_ANALYSIS_USE_FILE:BOOL=ON
     -DGATE_ANALYSIS_USE_GENERAL:BOOL=ON
+    -DGATE_DOWNLOAD_BENCHMARKS_DATA:BOOL=ON
+    -DGATE_DOWNLOAD_EXAMPLES_DATA:BOOL=ON
     -DGATE_USE_ECAT7:BOOL=OFF
     -DGATE_USE_GEANT4_UIVIS:BOOL=ON
     -DGATE_USE_GPU:BOOL=OFF
@@ -194,34 +197,34 @@ ENDIF()
 
 #=========================================================
 # GATE
-IF (BUILD_GATE_WITH_RTK)
-  ExternalProject_Add(
-    opengate
-    STAMP_DIR ${base}/stamp
-    DOWNLOAD_DIR ${base}/dl
-    INSTALL_DIR ${INSTALL_PREFIX}
-    DEPENDS geant4 clhep root itk rtk
-    GIT_REPOSITORY gitopengate:opengate.git
-    GIT_TAG origin/hybrid
-    CMAKE_ARGS
-    -DCMAKE_PREFIX_PATH:PATH=${INSTALL_PREFIX}
-    -DGATE_ANALYSIS_USE_FILE:BOOL=ON
-    -DGATE_ANALYSIS_USE_GENERAL:BOOL=ON
-    -DGATE_USE_ECAT7:BOOL=OFF
-    -DGATE_USE_GEANT4_UIVIS:BOOL=ON
-    -DGATE_USE_GPU:BOOL=OFF
-    -DGATE_USE_LMF:BOOL=OFF
-    -DGATE_USE_OPTICAL:BOOL=OFF
-    -DGATE_USE_SYSTEM_CLHEP:BOOL=ON
-    -DCLHEP_CONFIG_EXECUTABLE:FILEPATH=${INSTALL_PREFIX}/bin/clhep-config
-    -DCLHEP_INCLUDE_DIR:PATH=${INSTALL_PREFIX}/include
-    -DGATE_USE_ROOT:BOOL=ON
-    -DGATE_USE_RTK:BOOL=ON
-    -DGeant4_DIR:PATH=${INSTALL_PREFIX}
-    -DROOTCINT_EXECUTABLE:FILEPATH=${INSTALL_PREFIX}/bin/rootcint
-    -DGATE_USE_GEANT4_UIVIS:BOOL=ON
-    -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}
-    -DRTK_DIR:PATH=${SRC_PREFIX}/rtk-build
-    )
-ENDIF()
+#IF (BUILD_GATE_WITH_RTK)
+  #ExternalProject_Add(
+    #opengate
+    #STAMP_DIR ${base}/stamp
+    #DOWNLOAD_DIR ${base}/dl
+    #INSTALL_DIR ${INSTALL_PREFIX}
+    #DEPENDS geant4 clhep root itk rtk
+    #GIT_REPOSITORY gitopengate:opengate.git
+    #GIT_TAG origin/hybrid
+    #CMAKE_ARGS
+    #-DCMAKE_PREFIX_PATH:PATH=${INSTALL_PREFIX}
+    #-DGATE_ANALYSIS_USE_FILE:BOOL=ON
+    #-DGATE_ANALYSIS_USE_GENERAL:BOOL=ON
+    #-DGATE_USE_ECAT7:BOOL=OFF
+    #-DGATE_USE_GEANT4_UIVIS:BOOL=ON
+    #-DGATE_USE_GPU:BOOL=OFF
+    #-DGATE_USE_LMF:BOOL=OFF
+    #-DGATE_USE_OPTICAL:BOOL=OFF
+    #-DGATE_USE_SYSTEM_CLHEP:BOOL=ON
+    #-DCLHEP_CONFIG_EXECUTABLE:FILEPATH=${INSTALL_PREFIX}/bin/clhep-config
+    #-DCLHEP_INCLUDE_DIR:PATH=${INSTALL_PREFIX}/include
+    #-DGATE_USE_ROOT:BOOL=ON
+    #-DGATE_USE_RTK:BOOL=ON
+    #-DGeant4_DIR:PATH=${INSTALL_PREFIX}
+    #-DROOTCINT_EXECUTABLE:FILEPATH=${INSTALL_PREFIX}/bin/rootcint
+    #-DGATE_USE_GEANT4_UIVIS:BOOL=ON
+    #-DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}
+    #-DRTK_DIR:PATH=${SRC_PREFIX}/rtk-build
+    #)
+#ENDIF()
 #=========================================================
